[gd_scene load_steps=8 format=2]

[ext_resource path="res://icon.png" type="Texture" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"
var ball = preload(\"res://ball.tscn\")

# Called when the node enters the scene tree for the first time.
func _ready():
	for i in range(600):
		var new_ball = ball.instance()
		new_ball.global_position = Vector2(300,50)
		self.add_child(new_ball)
		


# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass
"

[sub_resource type="PhysicsMaterial" id=6]
friction = 0.0
rough = true
bounce = 1.0

[sub_resource type="GDScript" id=2]
script/source = "extends StaticBody2D


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	self.global_position = get_viewport().get_mouse_position()
"

[sub_resource type="CircleShape2D" id=3]
radius = 65.0

[sub_resource type="Shader" id=4]
code = "shader_type canvas_item;

uniform sampler2D droplet;

void fragment(){
    vec4 col = texture(SCREEN_TEXTURE, SCREEN_UV) * 0.16;
    col += texture(SCREEN_TEXTURE, SCREEN_UV + vec2(SCREEN_PIXEL_SIZE.x * 4f, 0.0)) * 0.15;
    col += texture(SCREEN_TEXTURE, SCREEN_UV + vec2(-SCREEN_PIXEL_SIZE.x * 2.7f, 0.0)) * 0.15;
    col += texture(SCREEN_TEXTURE, SCREEN_UV + vec2(2.0 * SCREEN_PIXEL_SIZE.x * 2.7f, 0.0)) * 0.12;
    col += texture(SCREEN_TEXTURE, SCREEN_UV + vec2(2.0 * -SCREEN_PIXEL_SIZE.x * 2.7f, 0.0)) * 0.12;
    col += texture(SCREEN_TEXTURE, SCREEN_UV + vec2(3.0 * SCREEN_PIXEL_SIZE.x * 2.7f, 0.0)) * 0.09;
    col += texture(SCREEN_TEXTURE, SCREEN_UV + vec2(3.0 * -SCREEN_PIXEL_SIZE.x * 2.7f, 0.0)) * 0.09;
    col += texture(SCREEN_TEXTURE, SCREEN_UV + vec2(4.0 * SCREEN_PIXEL_SIZE.x * 2.7f , 0.0)) * 0.05;
    col += texture(SCREEN_TEXTURE, SCREEN_UV + vec2(4.0 * -SCREEN_PIXEL_SIZE.x * 2.7f, 0.0)) * 0.05;
    
	col += texture(SCREEN_TEXTURE, SCREEN_UV + vec2(0.0, SCREEN_PIXEL_SIZE.y * 2.7f)) * 0.15;
    col += texture(SCREEN_TEXTURE, SCREEN_UV + vec2(0.0, -SCREEN_PIXEL_SIZE.y * 2.7f)) * 0.15;
    col += texture(SCREEN_TEXTURE, SCREEN_UV + vec2(0.0, 2.0 * SCREEN_PIXEL_SIZE.y * 2.7f)) * 0.12;
    col += texture(SCREEN_TEXTURE, SCREEN_UV + vec2(0.0, 2.0 * -SCREEN_PIXEL_SIZE.y * 2.7f)) * 0.12;
    col += texture(SCREEN_TEXTURE, SCREEN_UV + vec2(0.0, 3.0 * SCREEN_PIXEL_SIZE.y * 2.7f)) * 0.09;
    col += texture(SCREEN_TEXTURE, SCREEN_UV + vec2(0.0, 3.0 * -SCREEN_PIXEL_SIZE.y * 2.7f)) * 0.09;
    col += texture(SCREEN_TEXTURE, SCREEN_UV + vec2(0.0, 4.0 * SCREEN_PIXEL_SIZE.y * 2.7f)) * 0.05;
    col += texture(SCREEN_TEXTURE, SCREEN_UV + vec2(0.0, 4.0 * -SCREEN_PIXEL_SIZE.y * 2.7f)) * 0.05;
	col += texture(TEXTURE, SCREEN_UV) * 0.16;
	
	COLOR = vec4(vec3(26f / 255f, 188f /255f, 156f / 255f),col.b >= 0.92 ? 1f: 0f);
	
}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/droplet = ExtResource( 1 )

[node name="aquarium" type="Node2D"]
script = SubResource( 1 )

[node name="CanvasLayer2" type="CanvasLayer" parent="."]
layer = 2

[node name="StaticBody2D" type="StaticBody2D" parent="CanvasLayer2"]
position = Vector2( 312, 280 )
collision_mask = 3
physics_material_override = SubResource( 6 )
script = SubResource( 2 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="CanvasLayer2/StaticBody2D"]
shape = SubResource( 3 )
__meta__ = {
"_edit_lock_": true
}

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="rect" type="ColorRect" parent="CanvasLayer"]
material = SubResource( 5 )
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_lock_": true,
"_edit_use_anchors_": false
}

[node name="container" type="StaticBody2D" parent="CanvasLayer/rect"]
position = Vector2( 8, 0 )

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="CanvasLayer/rect/container"]
position = Vector2( -8, 0 )
polygon = PoolVector2Array( 603.712, 402.081, 0.464844, 401.915, 0.464844, 0.302094, 48.7798, 1.05387, 48.7798, 293, 112, 360, 496, 360, 560, 312, 560, 0, 608, 0 )
